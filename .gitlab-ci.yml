stages:          # List of stages for jobs, and their order of execution
    - lint
    - build
    - test
    - deploy
    - accessibility
    - performance
    - fuzz

variables:
    a11y_urls: "https://wttr.in"
    ASDF_JAVA_VERSION: 11
    LM_JAVA_VERSION: 11
    API_DESCRIPTION: design/API.apib
    API_LOCATION: https://api.example.com # the test API root
    # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
    # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used when running from the command line.
    # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
    ESLINT_ARGS: "$( [[ -e .eslintrc ]] || echo '--no-eslintrc' ) --color"
    ESLINT_DIR: "."

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
    paths:
        - .m2/repository
        - node_modules

include:
    - template: Jobs/Code-Quality.gitlab-ci.yml                 # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html
    - template: Jobs/Dependency-Scanning.gitlab-ci.yml          # https://docs.gitlab.com/ee/user/application_security/dependency_scanning/
    - template: Jobs/Browser-Performance-Testing.gitlab-ci.yml  # https://docs.gitlab.com/ee/user/project/merge_requests/browser_performance_testing.html
    - template: Jobs/Secret-Detection.gitlab-ci.yml             # https://docs.gitlab.com/ee/user/application_security/secret_detection/
    - template: Jobs/License-Scanning.gitlab-ci.yml             # https://docs.gitlab.com/ee/user/compliance/license_compliance/index.html
    - template: Verify/Accessibility.gitlab-ci.yml              # https://docs.gitlab.com/ee/user/project/merge_requests/accessibility_testing.html
  # - template: Coverage-Fuzzing.gitlab-ci.yml                  # https://docs.gitlab.com/ee/user/application_security/coverage_fuzzing/

lint-checkstyle:
    stage: lint
    image: maven:3.8.5-jdk-11
    script:
        - mvn $MAVEN_CLI_OPTS package
    artifacts:
        name: $CI_COMMIT_REF_NAME-report
        expose_as: report
        paths: 
            - target/site/
        expire_in: 1 week

lint-ts:
    stage: lint  # It can run at the same time as other lint jobs (in parallel).
    image: pipelinecomponents/tslint:latest
    script:
        - tslint '**/*.ts'

lint-js:
    stage: lint  # It can run at the same time as other lint jobs (in parallel).
    image: pipelinecomponents/eslint:latest
    before_script:
        - touch dummy.js # prevents eslint complaining that there are no files to lint
    script:
        - eslint $ESLINT_DIR $ESLINT_ARGS

lint-json:
    stage: lint
    image: pipeline-components/jsonlint:latest
    script:
        - find . -not -path './.git/*' -name '*.json' -type f -print0 | parallel --will-cite -k -0 -n1 jsonlint -q

lint-xml:
    stage: lint
    image: pipeline-components/xmllint:latest
    script:
        - find . -not -path './.git/*' -name '*.xml' -type f -print0 | xargs xmllint --noout

lint-md:
    stage: lint
    image: pipeline-components/markdownlint:latest
    script:
        - mdl --style all --warnings .

build_maven:
    stage: build
    image: maven:3.8.5-jdk-11
    script:
        - mvn $MAVEN_CLI_OPTS compile

build_node:
    stage: build
    image: node:latest
    script:
        - npm install

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
    stage: test
    script:
        - 'mvn $MAVEN_CLI_OPTS verify'
    except:
        variables:
            - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Verify merge requests using JDK11
verify:jdk11:
    <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
deploy:jdk11:
    stage: deploy
    image: maven:3.8.5-jdk-11
    script:
        - mvn $MAVEN_CLI_OPTS verify
        - if [ ! -f ci_settings.xml ];
            then echo "CI settings missing\!";
            else mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml
          fi
    only:
        variables:
            - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    artifacts:
        name: $CI_COMMIT_REF_NAME-artifact
        expose_as: artifact
        paths: 
            - target/visol.war
        expire_in: 1 week

browser_performance:
  variables:
    URL: https://wttr.in

api_fuzzing:
    stage: fuzz
    image: node:latest
    script:
        - npm install dredd@^14.1.0 --no-optional --global
        - dredd $API_DESCRIPTION $API_LOCATION

# coverage_fuzzing_java:
#     extends: .fuzz_base
#     image: maven:3.6.3-jdk-11
#     script:
#         - mvn install
#         - ./gitlab-cov-fuzz run --regression=$REGRESSION --engine javafuzz -- com.gitlab.javafuzz.examples.FuzzParseComplex
#or
#     script:
#         - mvn package
#         - curl -o zest-cli.jar https://repo1.maven.org/maven2/edu/berkeley/cs/jqf/jqf-fuzz/1.5/jqf-fuzz-1.5-zest-cli.jar
#         - ./gitlab-cov-fuzz run --regression=$REGRESSION --engine jqf -- ./target/example-java-1.0-SNAPSHOT-fat-tests.jar dev.fuzzit.examplejava.ParseComplexTest fuzz
# 
# coverage_fuzzing_javascript:
#     extends: .fuzz_base
#     image: node:12
#     script:
#         - npm config set @gitlab-org:registry https://gitlab.com/api/v4/packages/npm/ && npm i -g @gitlab-org/jsfuzz
#         - ./gitlab-cov-fuzz run --regression=$REGRESSION --engine jsfuzz -- fuzz.js

